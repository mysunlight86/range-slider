!function(e){var t={};function i(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(s,n,function(t){return e[t]}.bind(null,n));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/dist",i(i.s=3)}([function(e,t,i){var s=i(1),n=i(2);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var l={insert:"head",singleton:!1};s(n,l);e.exports=n.locals||{}},function(e,t,i){"use strict";var s,n=function(){return void 0===s&&(s=Boolean(window&&document&&document.all&&!window.atob)),s},l=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),h=[];function a(e){for(var t=-1,i=0;i<h.length;i++)if(h[i].identifier===e){t=i;break}return t}function r(e,t){for(var i={},s=[],n=0;n<e.length;n++){var l=e[n],r=t.base?l[0]+t.base:l[0],m=i[r]||0,o="".concat(r," ").concat(m);i[r]=m+1;var u=a(o),d={css:l[1],media:l[2],sourceMap:l[3]};-1!==u?(h[u].references++,h[u].updater(d)):h.push({identifier:o,updater:_(d,t),references:1}),s.push(o)}return s}function m(e){var t=document.createElement("style"),s=e.attributes||{};if(void 0===s.nonce){var n=i.nc;n&&(s.nonce=n)}if(Object.keys(s).forEach((function(e){t.setAttribute(e,s[e])})),"function"==typeof e.insert)e.insert(t);else{var h=l(e.insert||"head");if(!h)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");h.appendChild(t)}return t}var o,u=(o=[],function(e,t){return o[e]=t,o.filter(Boolean).join("\n")});function d(e,t,i,s){var n=i?"":s.media?"@media ".concat(s.media," {").concat(s.css,"}"):s.css;if(e.styleSheet)e.styleSheet.cssText=u(t,n);else{var l=document.createTextNode(n),h=e.childNodes;h[t]&&e.removeChild(h[t]),h.length?e.insertBefore(l,h[t]):e.appendChild(l)}}function v(e,t,i){var s=i.css,n=i.media,l=i.sourceMap;if(n?e.setAttribute("media",n):e.removeAttribute("media"),l&&btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),e.styleSheet)e.styleSheet.cssText=s;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(s))}}var f=null,c=0;function _(e,t){var i,s,n;if(t.singleton){var l=c++;i=f||(f=m(t)),s=d.bind(null,i,l,!1),n=d.bind(null,i,l,!0)}else i=m(t),s=v.bind(null,i,t),n=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return s(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;s(e=t)}else n()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=n());var i=r(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var s=0;s<i.length;s++){var n=a(i[s]);h[n].references--}for(var l=r(e,t),m=0;m<i.length;m++){var o=a(i[m]);0===h[o].references&&(h[o].updater(),h.splice(o,1))}i=l}}}},function(e,t,i){},function(e,t,i){"use strict";i.r(t);i(0);class s{constructor(e,t){this.bindedOnMouseMove=this.onMouseMove.bind(this),this.bindedOnMouseUp=this.onMouseUp.bind(this),this.bindedOnMouseDown=this.onMouseDown.bind(this),this.bindedOnResize=this.onResize.bind(this),this._model=t,this._options=this._model.getData(),this._min=this._options.min,this._max=this._options.max,this._step=this._options.step,this._mode=this._options.mode,this._hasInterval=this._options.hasInterval,this._values=this._options.values,this._view=e,this.lineElem=this._view.initSliderLine(),this._hasInterval?(this.minThumbInterval=this._view.initSliderThumb(this._values[0]),this.maxThumbInterval=this._view.initSliderThumb(this._values[1]),this.minValueInterval=this._view.initSliderValue(this._values[0]),this.maxValueInterval=this._view.initSliderValue(this._values[1]),this._view.fillSliderLine(Number(this.maxThumbInterval.style.left.slice(0,-2)),Number(this.minThumbInterval.style.left.slice(0,-2)))):(this.thumbElem=this._view.initSliderThumb(this._values[0]),this.valueElem=this._view.initSliderValue(this._values[0]),this._view.fillSliderLine(Number(this.thumbElem.style.left.slice(0,-2)))),this._view.initSliderScale(),this.sliderRun()}onMouseMove(e){if(this._hasInterval){const t=this.minThumbInterval.offsetWidth/2;let i=e.clientX-this.lineElem.getBoundingClientRect().left-t;i<-t&&(i=-t);const s=this.lineElem.offsetWidth-t;if(i>s&&(i=s),i<=this.minThumbInterval.offsetLeft)this.minThumbInterval.style.left=i+"px",this._values[0]=this._view.getSliderValue(this.minThumbInterval),this.minValueInterval.textContent=""+this._values[0],this.minValueInterval.style.left=i-(this.minValueInterval.offsetWidth-this.minThumbInterval.offsetWidth)/2+"px";else if(i>=this.maxThumbInterval.offsetLeft)this.maxThumbInterval.style.left=i+"px",this._values[1]=this._view.getSliderValue(this.maxThumbInterval),this.maxValueInterval.textContent=""+this._values[1],this.maxValueInterval.style.left=i-(this.maxValueInterval.offsetWidth-this.maxThumbInterval.offsetWidth)/2+"px";else{let e=this.maxThumbInterval.offsetLeft-this.minThumbInterval.offsetLeft;i-this.minThumbInterval.offsetLeft<=e/2?e>0&&(this.minThumbInterval.style.left=i+"px",this._values[0]=this._view.getSliderValue(this.minThumbInterval),this.minValueInterval.textContent=""+this._values[0],this.minValueInterval.style.left=i-(this.minValueInterval.offsetWidth-this.minThumbInterval.offsetWidth)/2+"px",e=this.maxThumbInterval.offsetLeft-this.minThumbInterval.offsetLeft):e>0&&(this.maxThumbInterval.style.left=i+"px",this._values[1]=this._view.getSliderValue(this.maxThumbInterval),this.maxValueInterval.textContent=""+this._values[1],this.maxValueInterval.style.left=i-(this.maxValueInterval.offsetWidth-this.maxThumbInterval.offsetWidth)/2+"px",e=this.maxThumbInterval.offsetLeft-this.minThumbInterval.offsetLeft)}this._view.fillSliderLine(Number(this.maxThumbInterval.style.left.slice(0,-2)),Number(this.minThumbInterval.style.left.slice(0,-2)))}else{const t=this.thumbElem.offsetWidth/2;let i=e.clientX-this.lineElem.getBoundingClientRect().left-t;i<-t&&(i=-t);const s=this.lineElem.offsetWidth-t;i>s&&(i=s),this.thumbElem.style.left=i+"px",this.lineElem.style.background=`linear-gradient(to right, red ${i}px, #e5e5e5 ${i}px)`,this.valueElem.style.left=i-(this.valueElem.offsetWidth-this.thumbElem.offsetWidth)/2+"px",this._values[0]=this._view.getSliderValue(this.thumbElem),this.valueElem.textContent=""+this._values[0]}}onMouseUp(){document.removeEventListener("mouseup",this.bindedOnMouseUp),document.removeEventListener("mousemove",this.bindedOnMouseMove)}onMouseDown(e){e.preventDefault();const t=e.target;console.log(t),document.addEventListener("mousemove",this.bindedOnMouseMove),document.addEventListener("mouseup",this.bindedOnMouseUp)}static returnFalse(){return!1}sliderRun(){this.lineElem.addEventListener("click",this.bindedOnMouseMove),window.addEventListener("resize",this.bindedOnResize),this._hasInterval?(this.minThumbInterval.addEventListener("mousedown",this.bindedOnMouseDown),this.minThumbInterval.addEventListener("dragstart",s.returnFalse),this.maxThumbInterval.addEventListener("mousedown",this.bindedOnMouseDown),this.maxThumbInterval.addEventListener("dragstart",s.returnFalse)):(this.thumbElem.addEventListener("mousedown",this.bindedOnMouseDown),this.thumbElem.addEventListener("dragstart",s.returnFalse))}destroy(){this.thumbElem.removeEventListener("mousedown",this.bindedOnMouseDown),this.lineElem.removeEventListener("click",this.bindedOnMouseMove),this.thumbElem.removeEventListener("dragstart",s.returnFalse),window.removeEventListener("resize",this.bindedOnResize)}setData(){this._options={min:this._min,max:this._max,step:this._step,mode:this._mode,hasInterval:this._hasInterval,values:this._values}}onResize(){this._view.setOptions(this._options),this._view.updateSliderScale(),this._hasInterval?(this._view.updateSliderThumb(this.minThumbInterval,this._values[0]),this._view.updateSliderThumb(this.maxThumbInterval,this._values[1]),this._view.fillSliderLine(Number(this.maxThumbInterval.style.left.slice(0,-2)),Number(this.minThumbInterval.style.left.slice(0,-2))),this._view.updateSliderValue(this.minValueInterval,this.minThumbInterval),this._view.updateSliderValue(this.maxValueInterval,this.maxThumbInterval)):(this._view.updateSliderThumb(this.thumbElem,this._values[0]),this._view.fillSliderLine(Number(this.thumbElem.style.left.slice(0,-2))),this._view.updateSliderValue(this.valueElem,this.thumbElem))}update(e){this._options=e.getData(),this.onResize(),console.log("ModelObserver: Reacted to the event.")}}class n{constructor(e){this._elemId=e}init(){return this.lineElem=document.getElementById(this._elemId),this.lineElem.classList.add("slider-body"),this.lineElem}}class l{constructor(e){this._parentElement=e}init(){return this.thumbElem=document.createElement("DIV"),this.thumbElem.classList.add("slider-thumb"),this._parentElement.append(this.thumbElem),this.thumbElem}}class h{constructor(e){this._parentElement=e}init(){return this.valueElem=document.createElement("DIV"),this.valueElem.classList.add("tip-value"),this._parentElement.append(this.valueElem),this.valueElem}}class a{constructor(e,t,i,s){this._parentElement=e,this._min=t,this._max=i,this._step=s}init(){this.scaleElem=document.createElement("DIV"),this.scaleElem.classList.add("scale"),this.minElem=document.createElement("SPAN"),this.minElem.textContent=""+this._min,this.minElem.style.position="absolute",this.maxElem=document.createElement("SPAN"),this.maxElem.textContent=""+this._max,this.maxElem.style.position="absolute",this._parentElement.append(this.scaleElem),this.scaleElem.append(this.minElem),this.scaleElem.append(this.maxElem),this.minElem.style.left=this.scaleElem.offsetLeft-this.minElem.offsetWidth/2+"px",this.maxElem.style.left=this.scaleElem.offsetWidth+this.scaleElem.offsetLeft-this.maxElem.offsetWidth/2+"px",this.mark=(this._max-this._min)/this._step;for(let e=1;e<this.mark;e++)this.middleElem=document.createElement("SPAN"),this.middleElem.textContent=""+(this._step*e+this._min),this.middleElem.style.position="absolute",this.maxElem.insertAdjacentElement("beforebegin",this.middleElem),this.middleElem.style.left=(Number(this.middleElem.textContent)-this._min)*this.scaleElem.offsetWidth/(this._max-this._min)+this.scaleElem.offsetLeft-this.middleElem.offsetWidth/2+"px";return this.scaleElem}}class r{constructor(e,t){this._elemId=e.slice(1),this._min=t.min,this._max=t.max,this._step=t.step,this._mode=t.mode,this._hasInterval=t.hasInterval,this._values=t.values}initSliderLine(){return this.lineElem=new n(this._elemId).init(),this.lineElem}initSliderThumb(e){return this.thumbElem=new l(this.lineElem).init(),this.thumbElem.style.left=this.getPositionElement(this.thumbElem,e),this.thumbElem}initSliderValue(e){return this.valueElem=new h(this.lineElem).init(),this.valueElem.textContent=""+e,this.valueElem.style.left=this.getPositionElement(this.valueElem,e),this.valueElem}initSliderScale(){this.scaleElem=new a(this.lineElem,this._min,this._max,this._step).init()}"getСoefficient"(){return this.lineElem.offsetWidth/(this._max-this._min)}getPositionElement(e,t){return(t-this._min)*this.getСoefficient()-e.offsetWidth/2+"px"}fillSliderLine(e,t){this.lineElem.style.background=t?`linear-gradient(to right, #e5e5e5 ${t}px,\n        red ${t}px, red ${e}px, #e5e5e5 ${e}px)`:`linear-gradient(to right, red ${e}px, #e5e5e5 ${e}px)`}getSliderValue(e){return Math.round((e.offsetLeft+e.offsetWidth/2)/this.getСoefficient()+this._min)}updateSliderThumb(e,t){this.thumbElem=e,this.thumbElem.style.left=this.getPositionElement(this.thumbElem,t)}updateSliderValue(e,t){this.valueElem=e,this.thumbElem=t,this.valueElem.textContent=""+this.getSliderValue(this.thumbElem),this.valueElem.style.left=this.getPositionElement(this.valueElem,Number(this.valueElem.textContent))}updateSliderScale(){const e=Array.from(this.scaleElem.children);for(let t=1;t<e.length;t++)e[t].style.left=(Number(e[t].textContent)-this._min)*this.getСoefficient()+this.scaleElem.offsetLeft-e[t].offsetWidth/2+"px"}setOptions(e){this._options=e}}class m{constructor(){this.observers=[]}attach(e){this.observers.includes(e);this.observers.push(e)}detach(e){const t=this.observers.indexOf(e);this.observers.splice(t,1)}notify(){for(const e of this.observers)e.update(this)}setData(e){this._min=e.min,this._max=e.max,this._step=e.step,this._mode=e.mode,this._hasInterval=e.hasInterval,this._values=e.values,this.checkValues()}checkValues(){if(this._min>this._max){const e=this._min;this._min=this._max,this._max=e}if(this._step>this._max-this._min&&(this._step=this._max-this._min),this._hasInterval)if(this._values[0]>this._values[1]){const e=this._values[0];this._values[0]=this._values[1],this._values[1]=e}else this._values[0]===this._values[1]&&(this._values[1]+=this._step);(this._values[0]<this._min||this._values[0]>this._max)&&(this._values[0]=this._min),(this._values[1]<this._min||this._values[1]>this._max)&&(this._values[1]=this._max),this.notify()}getData(){return{min:this._min,max:this._max,step:this._step,mode:this._mode,hasInterval:this._hasInterval,values:this._values}}}class o{constructor(e,t){this._min=0,this._max=300,this._step=82,this._mode="horizontal",this._hasInterval=!1,this._values=[this._min,this._min+this._step],this._selector=e,t&&(this._min=t.min?t.min:this._min,this._max=t.max?t.max:this._max,this._step=t.step?t.step:this._step,this._mode=t.mode?t.mode:this._mode,this._hasInterval=t.hasInterval?t.hasInterval:this._hasInterval,this._values=t.values?t.values:this._values)}setData(){this._options={min:this._min,max:this._max,step:this._step,mode:this._mode,hasInterval:this._hasInterval,values:this._values}}init(){this.setData();const e=new m;e.setData(this._options),this._options=e.getData();const t=new r(this._selector,this._options),i=new s(t,e);e.attach(i)}}new o("#slider1").init();new o("#slider2",{min:40,step:60,max:245}).init();new o("#slider3",{min:-100,values:[300]}).init();new o("#slider4",{min:-27,hasInterval:!0,values:[55,137]}).init();new o("#slider5",{hasInterval:!0,values:[29,138]}).init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,