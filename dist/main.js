!function(e){var t={};function i(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(s,n,function(t){return e[t]}.bind(null,n));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/dist",i(i.s=3)}([function(e,t,i){var s=i(1),n=i(2);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var o={insert:"head",singleton:!1};s(n,o);e.exports=n.locals||{}},function(e,t,i){"use strict";var s,n=function(){return void 0===s&&(s=Boolean(window&&document&&document.all&&!window.atob)),s},o=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),r=[];function l(e){for(var t=-1,i=0;i<r.length;i++)if(r[i].identifier===e){t=i;break}return t}function a(e,t){for(var i={},s=[],n=0;n<e.length;n++){var o=e[n],a=t.base?o[0]+t.base:o[0],c=i[a]||0,h="".concat(a," ").concat(c);i[a]=c+1;var u=l(h),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==u?(r[u].references++,r[u].updater(d)):r.push({identifier:h,updater:_(d,t),references:1}),s.push(h)}return s}function c(e){var t=document.createElement("style"),s=e.attributes||{};if(void 0===s.nonce){var n=i.nc;n&&(s.nonce=n)}if(Object.keys(s).forEach((function(e){t.setAttribute(e,s[e])})),"function"==typeof e.insert)e.insert(t);else{var r=o(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var h,u=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function d(e,t,i,s){var n=i?"":s.media?"@media ".concat(s.media," {").concat(s.css,"}"):s.css;if(e.styleSheet)e.styleSheet.cssText=u(t,n);else{var o=document.createTextNode(n),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function m(e,t,i){var s=i.css,n=i.media,o=i.sourceMap;if(n?e.setAttribute("media",n):e.removeAttribute("media"),o&&btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=s;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(s))}}var f=null,p=0;function _(e,t){var i,s,n;if(t.singleton){var o=p++;i=f||(f=c(t)),s=d.bind(null,i,o,!1),n=d.bind(null,i,o,!0)}else i=c(t),s=m.bind(null,i,t),n=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return s(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;s(e=t)}else n()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=n());var i=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var s=0;s<i.length;s++){var n=l(i[s]);r[n].references--}for(var o=a(e,t),c=0;c<i.length;c++){var h=l(i[c]);0===r[h].references&&(r[h].updater(),r.splice(h,1))}i=o}}}},function(e,t,i){},function(e,t,i){"use strict";i.r(t);i(0);class s{constructor(e){this.sliderLine="slider-body",this.selector=e}init(){return this.container=document.querySelector(this.selector),this.container.style.padding="50px 20px 20px",this.bodySlider=document.createElement("DIV"),this.bodySlider.classList.add(this.sliderLine),this.container.append(this.bodySlider),this.sliderLine}destroy(){this.bodySlider.remove()}}class n{constructor(e,t){this._selector=e,this._values=t}init(){this.container=document.querySelector(this._selector),this.thumbSlider=document.createElement("DIV"),this.thumbSlider.classList.add("slider-thumb"),this.thumbSlider.style.left=this._values[0]+"px",this.container.append(this.thumbSlider)}destroy(){this.thumbSlider.remove()}}class o{constructor(e){this._selector=e}init(){this.container=document.querySelector(this._selector),this.tipValue=document.createElement("DIV"),this.tipValue.classList.add("tip-value"),this.container.append(this.tipValue)}destroy(){this.tipValue.remove()}}class r{constructor(e,t,i,s){this._parentId=e,this._min=t,this._max=i,this._step=s,this.scale=document.createElement("DIV"),this.scale.classList.add("scale"),this.min=document.createElement("SPAN"),this.min.textContent=""+this._min,this.min.style.position="absolute",this.max=document.createElement("SPAN"),this.max.textContent=""+this._max,this.max.style.position="absolute"}init(){this.container=document.getElementById(this._parentId),this.container.append(this.scale),this.scale.append(this.min),this.scale.append(this.max),this.min.style.left=this.scale.offsetLeft-this.min.offsetWidth/2+"px",this.max.style.left=this.scale.offsetWidth+this.scale.offsetLeft-this.max.offsetWidth/2+"px",this.mark=(this._max-this._min)/this._step;for(let e=1;e<this.mark;e++)this.elem=document.createElement("SPAN"),this.elem.textContent=""+(this._step*e+this._min),this.elem.style.position="absolute",this.max.insertAdjacentElement("beforebegin",this.elem),(Number(this.elem.textContent)<100||Number(this.elem.textContent)<1e3)&&(this.elem.style.left=(Number(this.elem.textContent)-this._min)*this.scale.offsetWidth/(this._max-this._min)+this.scale.offsetLeft-this.elem.offsetWidth/2+"px")}destroy(){this.scale.remove()}}class l{constructor(e,t){this._selector=e,this._options=t}positionElement(e,t,i){return console.log(e),console.log(t),console.log(i),console.log(this._minValue),console.log(this._maxValue),console.log(e.offsetLeft),console.log(t.offsetWidth),console.log(e.offsetWidth),(i-this._minValue)*e.offsetWidth/(this._maxValue-this._minValue)+e.offsetLeft-t.offsetWidth/2+"px"}showSlider(){const e=new s(this._selector);this.sliderLineClass=e.init();new n(`${this._selector} > .${this.sliderLineClass}`,this._options.values).init();new o(`${this._selector} > .${this.sliderLineClass}`).init()}showScale(e,t,i){this._minValue=e,this._maxValue=t,this._stepValue=i;new r(this._selector,this._minValue,this._maxValue,this._stepValue).init()}}class a{constructor(e,t){this._selector=e,t||(t={}),this._min=t.min?t.min:0,this._max=t.max?t.max:300,this._step=t.step?t.step:57,this._kind=t.kind?t.kind:"horizontal",this._isBasic=!t.isBasic||t.isBasic,this._values=t.values?t.values:[38]}sliderStart(){this._options={min:this._min,max:this._max,step:this._step,kind:this._kind,isBasic:this._isBasic,values:this._values},console.log(this._options);new l(this._selector,this._options).showSlider()}}new a(".slider1").sliderStart();new a(".slider2",{min:40,step:60,max:245}).sliderStart();new a(".slider3",{values:[256]}).sliderStart()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,