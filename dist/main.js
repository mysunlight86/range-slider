!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/dist",i(i.s=3)}([function(t,e,i){var s=i(1),n=i(2);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[t.i,n,""]]);var r={insert:"head",singleton:!1};s(n,r);t.exports=n.locals||{}},function(t,e,i){"use strict";var s,n=function(){return void 0===s&&(s=Boolean(window&&document&&document.all&&!window.atob)),s},r=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}(),o=[];function a(t){for(var e=-1,i=0;i<o.length;i++)if(o[i].identifier===t){e=i;break}return e}function l(t,e){for(var i={},s=[],n=0;n<t.length;n++){var r=t[n],l=e.base?r[0]+e.base:r[0],c=i[l]||0,h="".concat(l," ").concat(c);i[l]=c+1;var u=a(h),d={css:r[1],media:r[2],sourceMap:r[3]};-1!==u?(o[u].references++,o[u].updater(d)):o.push({identifier:h,updater:_(d,e),references:1}),s.push(h)}return s}function c(t){var e=document.createElement("style"),s=t.attributes||{};if(void 0===s.nonce){var n=i.nc;n&&(s.nonce=n)}if(Object.keys(s).forEach((function(t){e.setAttribute(t,s[t])})),"function"==typeof t.insert)t.insert(e);else{var o=r(t.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}return e}var h,u=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function d(t,e,i,s){var n=i?"":s.media?"@media ".concat(s.media," {").concat(s.css,"}"):s.css;if(t.styleSheet)t.styleSheet.cssText=u(e,n);else{var r=document.createTextNode(n),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(r,o[e]):t.appendChild(r)}}function m(t,e,i){var s=i.css,n=i.media,r=i.sourceMap;if(n?t.setAttribute("media",n):t.removeAttribute("media"),r&&btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=s;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(s))}}var f=null,p=0;function _(t,e){var i,s,n;if(e.singleton){var r=p++;i=f||(f=c(e)),s=d.bind(null,i,r,!1),n=d.bind(null,i,r,!0)}else i=c(e),s=m.bind(null,i,e),n=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return s(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;s(t=e)}else n()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=n());var i=l(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var s=0;s<i.length;s++){var n=a(i[s]);o[n].references--}for(var r=l(t,e),c=0;c<i.length;c++){var h=a(i[c]);0===o[h].references&&(o[h].updater(),o.splice(h,1))}i=r}}}},function(t,e,i){},function(t,e,i){"use strict";i.r(e);i(0);class s{constructor(t){this.sliderLine="slider-body",this.selector=t}init(){return this.container=document.querySelector(this.selector),this.container.style.padding="50px 20px 20px",this.bodySlider=document.createElement("DIV"),this.bodySlider.classList.add(this.sliderLine),this.container.append(this.bodySlider),this.sliderLine}destroy(){this.bodySlider.remove()}}class n{constructor(t,e){this._selector=t,this._options=e}init(){this.container=document.querySelector(this._selector),this.thumbSlider=document.createElement("DIV"),this.thumbSlider.classList.add("slider-thumb"),this.container.append(this.thumbSlider),this.thumbSlider.style.left=(this._options.values[0]-this._options.min)*this.container.offsetWidth/(this._options.max-this._options.min)+this.container.offsetLeft-this.thumbSlider.offsetWidth/2+"px"}destroy(){this.thumbSlider.remove()}}class r{constructor(t){this._selector=t}init(){this.container=document.querySelector(this._selector),this.tipValue=document.createElement("DIV"),this.tipValue.classList.add("tip-value"),this.container.append(this.tipValue)}destroy(){this.tipValue.remove()}}class o{constructor(t,e,i,s){this._parentId=t,this._min=e,this._max=i,this._step=s,this.scale=document.createElement("DIV"),this.scale.classList.add("scale"),this.min=document.createElement("SPAN"),this.min.textContent=""+this._min,this.min.style.position="absolute",this.max=document.createElement("SPAN"),this.max.textContent=""+this._max,this.max.style.position="absolute"}init(){this.container=document.getElementById(this._parentId),this.container.append(this.scale),this.scale.append(this.min),this.scale.append(this.max),this.min.style.left=this.scale.offsetLeft-this.min.offsetWidth/2+"px",this.max.style.left=this.scale.offsetWidth+this.scale.offsetLeft-this.max.offsetWidth/2+"px",this.mark=(this._max-this._min)/this._step;for(let t=1;t<this.mark;t++)this.elem=document.createElement("SPAN"),this.elem.textContent=""+(this._step*t+this._min),this.elem.style.position="absolute",this.max.insertAdjacentElement("beforebegin",this.elem),(Number(this.elem.textContent)<100||Number(this.elem.textContent)<1e3)&&(this.elem.style.left=(Number(this.elem.textContent)-this._min)*this.scale.offsetWidth/(this._max-this._min)+this.scale.offsetLeft-this.elem.offsetWidth/2+"px")}destroy(){this.scale.remove()}}class a{constructor(t,e){this._selector=t,this._options=e}positionElement(t,e,i){return(i-this._minValue)*t.offsetWidth/(this._maxValue-this._minValue)+t.offsetLeft-e.offsetWidth/2+"px"}showSlider(){const t=new s(this._selector);this.sliderLineClass=t.init();new n(`${this._selector} > .${this.sliderLineClass}`,this._options).init();new r(`${this._selector} > .${this.sliderLineClass}`).init()}showScale(t,e,i){this._minValue=t,this._maxValue=e,this._stepValue=i;new o(this._selector,this._minValue,this._maxValue,this._stepValue).init()}}class l{constructor(t,e){this._selector=t,e||(e={}),this._min=e.min?e.min:0,this._max=e.max?e.max:300,this._step=e.step?e.step:57,this._kind=e.kind?e.kind:"horizontal",this._isBasic=!e.isBasic||e.isBasic,this._values=e.values?e.values:[38]}sliderStart(){this._options={min:this._min,max:this._max,step:this._step,kind:this._kind,isBasic:this._isBasic,values:this._values},console.log(this._options);new a(this._selector,this._options).showSlider()}}new l(".slider1").sliderStart();new l(".slider2",{min:40,step:60,max:245}).sliderStart();new l(".slider3",{values:[256]}).sliderStart()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,