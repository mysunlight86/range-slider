!function(e){var t={};function n(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(i,s,function(t){return e[t]}.bind(null,s));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/dist",n(n.s=3)}([function(e,t,n){var i=n(1),s=n(2);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[e.i,s,""]]);var o={insert:"head",singleton:!1};i(s,o);e.exports=s.locals||{}},function(e,t,n){"use strict";var i,s=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),r=[];function a(e){for(var t=-1,n=0;n<r.length;n++)if(r[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},i=[],s=0;s<e.length;s++){var o=e[s],l=t.base?o[0]+t.base:o[0],c=n[l]||0,d="".concat(l," ").concat(c);n[l]=c+1;var u=a(d),h={css:o[1],media:o[2],sourceMap:o[3]};-1!==u?(r[u].references++,r[u].updater(h)):r.push({identifier:d,updater:b(h,t),references:1}),i.push(d)}return i}function c(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var s=n.nc;s&&(i.nonce=s)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var r=o(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var d,u=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join("\n")});function h(e,t,n,i){var s=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,s);else{var o=document.createTextNode(s),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function m(e,t,n){var i=n.css,s=n.media,o=n.sourceMap;if(s?e.setAttribute("media",s):e.removeAttribute("media"),o&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var f=null,p=0;function b(e,t){var n,i,s;if(t.singleton){var o=p++;n=f||(f=c(t)),i=h.bind(null,n,o,!1),s=h.bind(null,n,o,!0)}else n=c(t),i=m.bind(null,n,t),s=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else s()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=s());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var s=a(n[i]);r[s].references--}for(var o=l(e,t),c=0;c<n.length;c++){var d=a(n[c]);0===r[d].references&&(r[d].updater(),r.splice(d,1))}n=o}}}},function(e,t,n){},function(e,t,n){"use strict";n.r(t);n(0);var i=function(){const e=document.getElementById("slider-body"),t=document.getElementById("slider-thumb"),n=document.getElementById("tip-value"),i=t.offsetWidth/2;function s(s){let o=s.clientX-e.getBoundingClientRect().left-i;o<-i&&(o=-i);const r=e.offsetWidth-i;var a;o>r&&(o=r),t.style.left=o+"px",n.textContent=""+(o+i),n.style.left=o-(n.offsetWidth-t.offsetWidth)/2+"px",a=o+i,e.style.background=`linear-gradient(to right, red ${a}px, #e5e5e5 ${a}px)`}function o(){document.removeEventListener("mouseup",o),document.removeEventListener("mousemove",s)}n.textContent=""+(Number(getComputedStyle(t).left.slice(0,-2))+i),t.addEventListener("mousedown",(function(e){e.preventDefault(),document.addEventListener("mousemove",s),document.addEventListener("mouseup",o)})),e.addEventListener("click",s),t.addEventListener("dragstart",(function(){return!1}))};var s=class{constructor(){this.container=document.getElementById("range-slider"),this.minValue=0,this.maxValue=300,this.step=50,this.mark=(this.maxValue-this.minValue)/this.step,this.scale=document.createElement("DIV"),this.scale.classList.add("scale"),this.min=document.createElement("SPAN"),this.min.textContent=""+this.minValue,this.min.style.position="absolute",this.min.style.left="24px",this.max=document.createElement("SPAN"),this.max.textContent=""+this.maxValue,this.max.style.position="absolute",this.max.style.left="316px"}init(){this.container.append(this.scale),this.scale.append(this.min),this.scale.append(this.max),console.log(this.max.offsetWidth);for(let e=1;e<this.mark;e++)this.elem=document.createElement("SPAN"),this.elem.textContent=""+this.step*e,this.elem.style.position="absolute",Number(this.elem.textContent)<100?this.elem.style.left=Number(this.elem.textContent)+20+"px":Number(this.elem.textContent)<1e3&&(this.elem.style.left=Number(this.elem.textContent)+16+"px"),this.max.insertAdjacentElement("beforebegin",this.elem)}destroy(){this.scale.remove()}};class o{constructor(){this.observers=[]}attach(e){if(this.observers.includes(e))return console.log("Subject: Observer has been attached already.");console.log("Subject: Attached an observer."),this.observers.push(e)}detach(e){const t=this.observers.indexOf(e);if(-1===t)return console.log("Subject: Nonexistent observer.");this.observers.splice(t,1),console.log("Subject: Detached an observer.")}notify(){console.log("Subject: Notifying observers...");for(const e of this.observers)e.update(this)}someBusinessLogic(){console.log("\nSubject: I'm doing something important."),this.state=Math.floor(11*Math.random()),console.log("Subject: My state has just changed to: "+this.state),this.notify()}}class r{constructor(e){this.sliderLine="slider-body",this._parentId=e}init(){return this.container=document.getElementById(this._parentId),this.bodySlider=document.createElement("DIV"),this.bodySlider.classList.add("slider-body"),this.bodySlider.setAttribute("id",this.sliderLine),this.container.append(this.bodySlider),this.sliderLine}destroy(){this.bodySlider.remove()}}class a{constructor(e){this._parentId=e}init(){this.container=document.getElementById(this._parentId),this.thumbSlider=document.createElement("DIV"),this.thumbSlider.classList.add("slider-thumb"),this.thumbSlider.setAttribute("id","slider-thumb"),this.container.append(this.thumbSlider)}destroy(){this.thumbSlider.remove()}}class l{constructor(e){this._parentId=e}init(){this.container=document.getElementById(this._parentId),this.tipValue=document.createElement("DIV"),this.tipValue.classList.add("tip-value"),this.tipValue.setAttribute("id","tip-value"),this.container.append(this.tipValue)}destroy(){this.tipValue.remove()}}new class{constructor(e){this._parentId=e}show(){const e=new r(this._parentId);this.sliderLineId=e.init();new a(this.sliderLineId).init();new l(this.sliderLineId).init()}}("range-slider").show();(new s).init(),i();const c=new o,d=new class{update(e){e instanceof o&&e.state<3&&console.log("ConcreteObserverA: Reacted to the event.")}};c.attach(d);const u=new class{isSubjectSatisfies(e){return e instanceof o&&(0===e.state||e.state>=2)}update(e){this.isSubjectSatisfies(e)&&console.log("ConcreteObserverB: Reacted to the event.")}};c.attach(u),c.someBusinessLogic(),c.someBusinessLogic(),c.detach(u),c.someBusinessLogic()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,