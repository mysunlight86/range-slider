!function(e){var t={};function s(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=e,s.c=t,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)s.d(n,i,function(t){return e[t]}.bind(null,i));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="/dist",s(s.s=3)}([function(e,t,s){var n=s(1),i=s(2);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};n(i,o);e.exports=i.locals||{}},function(e,t,s){"use strict";var n,i=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},o=function(){var e={};return function(t){if(void 0===e[t]){var s=document.querySelector(t);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(e){s=null}e[t]=s}return e[t]}}(),r=[];function a(e){for(var t=-1,s=0;s<r.length;s++)if(r[s].identifier===e){t=s;break}return t}function l(e,t){for(var s={},n=[],i=0;i<e.length;i++){var o=e[i],l=t.base?o[0]+t.base:o[0],c=s[l]||0,d="".concat(l," ").concat(c);s[l]=c+1;var u=a(d),h={css:o[1],media:o[2],sourceMap:o[3]};-1!==u?(r[u].references++,r[u].updater(h)):r.push({identifier:d,updater:b(h,t),references:1}),n.push(d)}return n}function c(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var i=s.nc;i&&(n.nonce=i)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var r=o(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var d,u=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join("\n")});function h(e,t,s,n){var i=s?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=u(t,i);else{var o=document.createTextNode(i),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function m(e,t,s){var n=s.css,i=s.media,o=s.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var f=null,p=0;function b(e,t){var s,n,i;if(t.singleton){var o=p++;s=f||(f=c(t)),n=h.bind(null,s,o,!1),i=h.bind(null,s,o,!0)}else s=c(t),n=m.bind(null,s,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(s)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var s=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<s.length;n++){var i=a(s[n]);r[i].references--}for(var o=l(e,t),c=0;c<s.length;c++){var d=a(s[c]);0===r[d].references&&(r[d].updater(),r.splice(d,1))}s=o}}}},function(e,t,s){},function(e,t,s){"use strict";s.r(t);s(0);var n=function(){const e=document.getElementById("slider-body"),t=document.getElementById("slider-thumb"),s=document.getElementById("tip-value"),n=t.offsetWidth/2;function i(i){let o=i.clientX-e.getBoundingClientRect().left-n;o<-n&&(o=-n);const r=e.offsetWidth-n;var a;o>r&&(o=r),t.style.left=o+"px",s.textContent=""+(o+n),s.style.left=o-(s.offsetWidth-t.offsetWidth)/2+"px",a=o+n,e.style.background=`linear-gradient(to right, red ${a}px, #e5e5e5 ${a}px)`}function o(){document.removeEventListener("mouseup",o),document.removeEventListener("mousemove",i)}s.textContent=""+(Number(getComputedStyle(t).left.slice(0,-2))+n),t.addEventListener("mousedown",(function(e){e.preventDefault(),document.addEventListener("mousemove",i),document.addEventListener("mouseup",o)})),e.addEventListener("click",i),t.addEventListener("dragstart",(function(){return!1}))};class i{constructor(){this.observers=[]}attach(e){if(this.observers.includes(e))return console.log("Subject: Observer has been attached already.");console.log("Subject: Attached an observer."),this.observers.push(e)}detach(e){const t=this.observers.indexOf(e);if(-1===t)return console.log("Subject: Nonexistent observer.");this.observers.splice(t,1),console.log("Subject: Detached an observer.")}notify(){console.log("Subject: Notifying observers...");for(const e of this.observers)e.update(this)}someBusinessLogic(){console.log("\nSubject: I'm doing something important."),this.state=Math.floor(11*Math.random()),console.log("Subject: My state has just changed to: "+this.state),this.notify()}}class o{constructor(e){this.sliderLine="slider-body",this._parentId=e}init(){return this.container=document.getElementById(this._parentId),this.bodySlider=document.createElement("DIV"),this.bodySlider.classList.add("slider-body"),this.bodySlider.setAttribute("id",this.sliderLine),this.container.append(this.bodySlider),this.sliderLine}destroy(){this.bodySlider.remove()}}class r{constructor(e){this._parentId=e}init(){this.container=document.getElementById(this._parentId),this.thumbSlider=document.createElement("DIV"),this.thumbSlider.classList.add("slider-thumb"),this.thumbSlider.setAttribute("id","slider-thumb"),this.container.append(this.thumbSlider)}destroy(){this.thumbSlider.remove()}}class a{constructor(e){this._parentId=e}init(){this.container=document.getElementById(this._parentId),this.tipValue=document.createElement("DIV"),this.tipValue.classList.add("tip-value"),this.tipValue.setAttribute("id","tip-value"),this.container.append(this.tipValue)}destroy(){this.tipValue.remove()}}class l{constructor(e,t,s,n){this._parentId=e,this._min=t,this._max=s,this._step=n,this.scale=document.createElement("DIV"),this.scale.classList.add("scale"),this.min=document.createElement("SPAN"),this.min.textContent=""+this._min,this.min.style.position="absolute",this.max=document.createElement("SPAN"),this.max.textContent=""+this._max,this.max.style.position="absolute"}init(){this.container=document.getElementById(this._parentId),this.container.append(this.scale),this.scale.append(this.min),this.scale.append(this.max),this.min.style.left=this.scale.offsetLeft-this.min.offsetWidth/2+"px",this.max.style.left=this.scale.offsetWidth+16+"px",this.mark=(this._max-this._min)/this._step,console.log(this.scale.offsetLeft),console.log(this.scale.offsetWidth),console.log(this.mark);for(let e=1;e<this.mark;e++)this.elem=document.createElement("SPAN"),this.elem.textContent=""+this._step*e,console.log(this.elem.textContent),this.elem.style.position="absolute",Number(this.elem.textContent)<100?this.elem.style.left=Number(this.elem.textContent)*this.scale.offsetWidth/this._max+20+"px":Number(this.elem.textContent)<1e3&&(this.elem.style.left=Number(this.elem.textContent)*this.scale.offsetWidth/this._max+16+"px"),this.max.insertAdjacentElement("beforebegin",this.elem)}destroy(){this.scale.remove()}}const c=new class{constructor(e){this._parentId=e}showSlider(){const e=new o(this._parentId);this.sliderLineId=e.init();new r(this.sliderLineId).init();new a(this.sliderLineId).init()}showScale(e,t,s){this._minValue=e,this._maxValue=t,this._stepValue=s;new l(this._parentId,this._minValue,this._maxValue,this._stepValue).init()}}("range-slider");c.showSlider();const d=new class{constructor(e){this.observers=[],e||(e={}),this._min=e.min?e.min:0,this._max=e.max?e.max:300,this._step=e.step?e.step:50,this._kind=e.kind?e.kind:"horizontal",this._isBasic=!e.isBasic||e.isBasic}attach(e){if(this.observers.includes(e))return console.log("Model: Presenter has been attached already.");console.log("Model: Attached a presenter."),this.observers.push(e)}detach(e){const t=this.observers.indexOf(e);if(-1===t)return console.log("Subject: Nonexistent observer.");this.observers.splice(t,1),console.log("Subject: Detached an observer.")}notify(){console.log("Model: Notifying observers...");for(const e of this.observers)e.update(this)}calcUnit(){return console.log("Model: My state has just changed"),{min:this._min,max:this._max,step:this._step}}},u=new class{transferModelData(e,t){this.modelOptions=e.calcUnit(),console.log(this.modelOptions),t.showScale(this.modelOptions.min,this.modelOptions.max,this.modelOptions.step)}update(e){console.log("ModelObserver: Reacted to the event.")}};d.attach(u),u.transferModelData(d,c),n();const h=new i,m=new class{update(e){e instanceof i&&e.state<3&&console.log("ConcreteObserverA: Reacted to the event.")}};h.attach(m);const f=new class{isSubjectSatisfies(e){return e instanceof i&&(0===e.state||e.state>=2)}update(e){this.isSubjectSatisfies(e)&&console.log("ConcreteObserverB: Reacted to the event.")}};h.attach(f),h.someBusinessLogic(),h.someBusinessLogic(),h.detach(f),h.someBusinessLogic()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,