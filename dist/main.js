!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/dist",n(n.s=3)}([function(e,t,n){var i=n(1),r=n(2);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){"use strict";var i,r=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),s=[];function l(e){for(var t=-1,n=0;n<s.length;n++)if(s[n].identifier===e){t=n;break}return t}function a(e,t){for(var n={},i=[],r=0;r<e.length;r++){var o=e[r],a=t.base?o[0]+t.base:o[0],d=n[a]||0,c="".concat(a," ").concat(d);n[a]=d+1;var u=l(c),f={css:o[1],media:o[2],sourceMap:o[3]};-1!==u?(s[u].references++,s[u].updater(f)):s.push({identifier:c,updater:v(f,t),references:1}),i.push(c)}return i}function d(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var r=n.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var s=o(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}var c,u=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function f(e,t,n,i){var r=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,r);else{var o=document.createTextNode(r),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(o,s[t]):e.appendChild(o)}}function m(e,t,n){var i=n.css,r=n.media,o=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),o&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var h=null,p=0;function v(e,t){var n,i,r;if(t.singleton){var o=p++;n=h||(h=d(t)),i=f.bind(null,n,o,!1),r=f.bind(null,n,o,!0)}else n=d(t),i=m.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var n=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var r=l(n[i]);s[r].references--}for(var o=a(e,t),d=0;d<n.length;d++){var c=l(n[d]);0===s[c].references&&(s[c].updater(),s.splice(c,1))}n=o}}}},function(e,t,n){},function(e,t,n){"use strict";n.r(t);n(0);var i=function(){const e=document.getElementById("slider-body"),t=document.getElementById("slider-thumb"),n=document.getElementById("tip-value"),i=t.offsetWidth/2;function r(r){let o=r.clientX-e.getBoundingClientRect().left-i;o<-i&&(o=-i);const s=e.offsetWidth-i;var l;o>s&&(o=s),t.style.left=o+"px",n.textContent=""+(o+i),n.style.left=o-(n.offsetWidth-t.offsetWidth)/2+"px",l=o+i,e.style.background=`linear-gradient(to right, red ${l}px, #e5e5e5 ${l}px)`}function o(){document.removeEventListener("mouseup",o),document.removeEventListener("mousemove",r)}n.textContent=""+(Number(getComputedStyle(t).left.slice(0,-2))+i),t.addEventListener("mousedown",(function(e){e.preventDefault(),document.addEventListener("mousemove",r),document.addEventListener("mouseup",o)})),e.addEventListener("click",r),t.addEventListener("dragstart",(function(){return!1}))};var r=class{constructor(){this.container=document.getElementById("range-slider"),this.bodySlider=document.createElement("DIV"),this.bodySlider.classList.add("slider-body"),this.bodySlider.classList.add("fill-slider-line"),this.bodySlider.setAttribute("id","slider-body")}init(){this.container.append(this.bodySlider)}destroy(){this.bodySlider.remove()}};var o=class{constructor(){this.container=document.getElementById("slider-body"),this.thumbSlider=document.createElement("DIV"),this.thumbSlider.classList.add("slider-thumb"),this.thumbSlider.setAttribute("id","slider-thumb")}init(){this.container.append(this.thumbSlider)}destroy(){this.thumbSlider.remove()}};var s=class{constructor(){this.container=document.getElementById("slider-body"),this.tipValue=document.createElement("DIV"),this.tipValue.classList.add("tip-value"),this.tipValue.setAttribute("id","tip-value")}init(){this.container.append(this.tipValue)}destroy(){this.tipValue.remove()}};var l=class{constructor(){this.container=document.getElementById("range-slider"),this.minValue=0,this.maxValue=300,this.step=50,this.mark=(this.maxValue-this.minValue)/this.step,this.scale=document.createElement("DIV"),this.scale.classList.add("scale"),this.min=document.createElement("DIV"),this.min.textContent=""+this.minValue,this.min.style.position="relative",this.min.style.left="-4px",this.max=document.createElement("DIV"),this.max.textContent=""+this.maxValue,this.max.style.position="relative",this.max.style.left="12px"}init(){this.container.append(this.scale),this.scale.append(this.min),this.scale.append(this.max),console.log(this.max.offsetWidth);for(let e=1;e<this.mark;e++)this.elem=document.createElement("DIV"),this.elem.textContent=""+this.step*e,this.elem.style.position="relative",this.elem.style.left=1===e?this.elem.offsetLeft+8+"px":this.elem.offsetLeft+12+"px",this.max.insertAdjacentElement("beforebegin",this.elem)}destroy(){this.scale.remove()}};(new r).init();(new o).init();(new s).init();(new l).init(),i();const a={makeObservableSubject(){const e=[],t=function(t){const n=e.slice(0);for(let e=0;e<n.length;e++)n[e](t)};return{addObserver:function(t){if("function"!=typeof t)throw new Error("observer must be a function");for(let n=0;n<e.length;n++){if(e[n]===t)throw new Error("observer already in the list")}e.push(t)},removeObserver:function(t){for(let n=0;n<e.length;n++){if(e[n]===t)return void e.splice(n,1)}throw new Error("could not find observer in list of observers")},notifyObservers:t,notify:t}},Model(e={}){this.options=e||{},this.modelChangedSubject=a.makeObservableSubject(),this.minValue=0,this.maxValue=300,this.step=50,this.mode="horizontal",this.type="single"},View(){this.init=function(){(new r).init();(new o).init();(new s).init()}},Controller(e,t){t.init()}},d=new a.Model,c=new a.View;new a.Controller(d,c)()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,