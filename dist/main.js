!function(e){var t={};function i(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(s,n,function(t){return e[t]}.bind(null,n));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/dist",i(i.s=3)}([function(e,t,i){var s=i(1),n=i(2);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var o={insert:"head",singleton:!1};s(n,o);e.exports=n.locals||{}},function(e,t,i){"use strict";var s,n=function(){return void 0===s&&(s=Boolean(window&&document&&document.all&&!window.atob)),s},o=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),r=[];function l(e){for(var t=-1,i=0;i<r.length;i++)if(r[i].identifier===e){t=i;break}return t}function a(e,t){for(var i={},s=[],n=0;n<e.length;n++){var o=e[n],a=t.base?o[0]+t.base:o[0],c=i[a]||0,h="".concat(a," ").concat(c);i[a]=c+1;var u=l(h),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==u?(r[u].references++,r[u].updater(d)):r.push({identifier:h,updater:v(d,t),references:1}),s.push(h)}return s}function c(e){var t=document.createElement("style"),s=e.attributes||{};if(void 0===s.nonce){var n=i.nc;n&&(s.nonce=n)}if(Object.keys(s).forEach((function(e){t.setAttribute(e,s[e])})),"function"==typeof e.insert)e.insert(t);else{var r=o(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var h,u=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function d(e,t,i,s){var n=i?"":s.media?"@media ".concat(s.media," {").concat(s.css,"}"):s.css;if(e.styleSheet)e.styleSheet.cssText=u(t,n);else{var o=document.createTextNode(n),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function m(e,t,i){var s=i.css,n=i.media,o=i.sourceMap;if(n?e.setAttribute("media",n):e.removeAttribute("media"),o&&btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=s;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(s))}}var f=null,p=0;function v(e,t){var i,s,n;if(t.singleton){var o=p++;i=f||(f=c(t)),s=d.bind(null,i,o,!1),n=d.bind(null,i,o,!0)}else i=c(t),s=m.bind(null,i,t),n=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return s(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;s(e=t)}else n()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=n());var i=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var s=0;s<i.length;s++){var n=l(i[s]);r[n].references--}for(var o=a(e,t),c=0;c<i.length;c++){var h=l(i[c]);0===r[h].references&&(r[h].updater(),r.splice(h,1))}i=o}}}},function(e,t,i){},function(e,t,i){"use strict";i.r(t);i(0);class s{constructor(e,t){this._elemId=e.slice(1),this._options=t}init(){this.lineElem=document.getElementById(this._elemId),this.thumbElem=document.createElement("DIV"),this.valueElem=document.createElement("DIV")}showSliderLine(){this.lineElem.classList.add("slider-body")}getPositionElement(e,t){return(t-this._options.min)*this.lineElem.offsetWidth/(this._options.max-this._options.min)-e.offsetWidth/2+"px"}fillSliderLine(e){this.lineElem.style.background=`linear-gradient(to right, red ${e}px, #e5e5e5 ${e}px)`}showSliderThumb(){this.thumbElem.classList.add("slider-thumb"),this.lineElem.append(this.thumbElem),console.log(this._options),this.thumbElem.style.left=this.getPositionElement(this.thumbElem,this._options.values[0]),this.fillSliderLine(Number(this.thumbElem.style.left.slice(0,-2)))}showSliderValue(){this.valueElem.classList.add("tip-value"),this.lineElem.append(this.valueElem),this.valueElem.textContent=""+Math.round((this.thumbElem.offsetLeft+this.thumbElem.offsetWidth/2-this.lineElem.offsetLeft)*(this._options.max-this._options.min)/this.lineElem.offsetWidth+this._options.min),this.valueElem.style.left=this.getPositionElement(this.valueElem,Number(this.valueElem.textContent))}}class n{communicate(e){this._selector=e.getSelector(),this._options=e.getData();const t=new s(this._selector,this._options);t.init(),t.showSliderLine(),t.showSliderThumb(),t.showSliderValue(),console.log("ModelObserver: Reacted to the event.")}}class o{constructor(){this.observers=[]}attach(e){this.observers.includes(e)&&console.log("Model: Presenter has been attached already."),console.log("Model: Attached a presenter."),this.observers.push(e)}detach(e){const t=this.observers.indexOf(e);-1===t&&console.log("Subject: Nonexistent observer."),this.observers.splice(t,1),console.log("Subject: Detached an observer.")}notify(){console.log("Model: Notifying observers...");for(const e of this.observers)e.communicate(this)}setData(e,t){this._min=e.min,this._max=e.max,this._step=e.step,this._kind=e.kind,this._isBasic=e.isBasic,this._values=e.values,this._selector=t,console.log("Model: My state has just changed"),this.notify()}getSelector(){return this._selector}getData(){return{min:this._min,max:this._max,step:this._step,kind:this._kind,isBasic:this._isBasic,values:this._values}}}class r{constructor(e,t){this._min=0,this._max=300,this._step=57,this._kind="horizontal",this._isBasic=!0,this._values=[this._step],this._selector=e,t&&(this._min=t.min?t.min:this._min,this._max=t.max?t.max:this._max,this._step=t.step?t.step:this._step,this._kind=t.kind?t.kind:this._kind,this._isBasic=t.isBasic?t.isBasic:this._isBasic,this._values=t.values?t.values:[this._step])}setData(){this._options={min:this._min,max:this._max,step:this._step,kind:this._kind,isBasic:this._isBasic,values:this._values}}init(){const e=new o,t=new n;e.attach(t),this.setData(),console.log(this._options),e.setData(this._options,this._selector)}}new r("#slider1").init();new r("#slider2",{min:40,step:60,max:245}).init();new r("#slider3",{values:[300]}).init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,