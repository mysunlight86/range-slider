!function(e){var t={};function i(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(n,s,function(t){return e[t]}.bind(null,s));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/dist",i(i.s=4)}([function(e,t,i){var n=i(1),s=i(2);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[e.i,s,""]]);var r={insert:"head",singleton:!1};n(s,r);e.exports=s.locals||{}},function(e,t,i){"use strict";var n,s=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},r=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),o=[];function a(e){for(var t=-1,i=0;i<o.length;i++)if(o[i].identifier===e){t=i;break}return t}function l(e,t){for(var i={},n=[],s=0;s<e.length;s++){var r=e[s],l=t.base?r[0]+t.base:r[0],c=i[l]||0,d="".concat(l," ").concat(c);i[l]=c+1;var u=a(d),h={css:r[1],media:r[2],sourceMap:r[3]};-1!==u?(o[u].references++,o[u].updater(h)):o.push({identifier:d,updater:b(h,t),references:1}),n.push(d)}return n}function c(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var s=i.nc;s&&(n.nonce=s)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var o=r(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var d,u=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join("\n")});function h(e,t,i,n){var s=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=u(t,s);else{var r=document.createTextNode(s),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(r,o[t]):e.appendChild(r)}}function m(e,t,i){var n=i.css,s=i.media,r=i.sourceMap;if(s?e.setAttribute("media",s):e.removeAttribute("media"),r&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var f=null,p=0;function b(e,t){var i,n,s;if(t.singleton){var r=p++;i=f||(f=c(t)),n=h.bind(null,i,r,!1),s=h.bind(null,i,r,!0)}else i=c(t),n=m.bind(null,i,t),s=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else s()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=s());var i=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<i.length;n++){var s=a(i[n]);o[s].references--}for(var r=l(e,t),c=0;c<i.length;c++){var d=a(i[c]);0===o[d].references&&(o[d].updater(),o.splice(d,1))}i=r}}}},function(e,t,i){},,function(e,t,i){"use strict";i.r(t);i(0);var n=function(){const e=document.getElementById("slider-body"),t=document.getElementById("slider-thumb"),i=document.getElementById("tip-value"),n=t.offsetWidth/2;function s(s){let r=s.clientX-e.getBoundingClientRect().left-n;r<-n&&(r=-n);const o=e.offsetWidth-n;var a;r>o&&(r=o),t.style.left=r+"px",i.textContent=""+(r+n),i.style.left=r-(i.offsetWidth-t.offsetWidth)/2+"px",a=r+n,e.style.background=`linear-gradient(to right, red ${a}px, #e5e5e5 ${a}px)`}function r(){document.removeEventListener("mouseup",r),document.removeEventListener("mousemove",s)}i.textContent=""+(Number(getComputedStyle(t).left.slice(0,-2))+n),t.addEventListener("mousedown",(function(e){e.preventDefault(),document.addEventListener("mousemove",s),document.addEventListener("mouseup",r)})),e.addEventListener("click",s),t.addEventListener("dragstart",(function(){return!1}))};class s{constructor(e){this.sliderLine="slider-body",this._parentId=e}init(){return this.container=document.getElementById(this._parentId),this.container.style.padding="50px 20px 20px",this.bodySlider=document.createElement("DIV"),this.bodySlider.classList.add("slider-body"),this.bodySlider.setAttribute("id",this.sliderLine),this.container.append(this.bodySlider),this.sliderLine}destroy(){this.bodySlider.remove()}}class r{constructor(e){this._selector=e}init(){this.container=document.querySelector(this._selector),this.thumbSlider=document.createElement("DIV"),this.thumbSlider.classList.add("slider-thumb"),this.thumbSlider.setAttribute("id","slider-thumb"),this.container.append(this.thumbSlider)}destroy(){this.thumbSlider.remove()}}class o{constructor(e){this._selector=e}init(){this.container=document.querySelector(this._selector),this.tipValue=document.createElement("DIV"),this.tipValue.classList.add("tip-value"),this.tipValue.setAttribute("id","tip-value"),this.container.append(this.tipValue)}destroy(){this.tipValue.remove()}}class a{constructor(e,t,i,n){this._parentId=e,this._min=t,this._max=i,this._step=n,this.scale=document.createElement("DIV"),this.scale.classList.add("scale"),this.min=document.createElement("SPAN"),this.min.textContent=""+this._min,this.min.style.position="absolute",this.max=document.createElement("SPAN"),this.max.textContent=""+this._max,this.max.style.position="absolute"}init(){this.container=document.getElementById(this._parentId),this.container.append(this.scale),this.scale.append(this.min),this.scale.append(this.max),this.min.style.left=this.scale.offsetLeft-this.min.offsetWidth/2+"px",this.max.style.left=this.scale.offsetWidth+this.scale.offsetLeft-this.max.offsetWidth/2+"px",this.mark=(this._max-this._min)/this._step;for(let e=1;e<this.mark;e++)this.elem=document.createElement("SPAN"),this.elem.textContent=""+(this._step*e+this._min),this.elem.style.position="absolute",this.max.insertAdjacentElement("beforebegin",this.elem),(Number(this.elem.textContent)<100||Number(this.elem.textContent)<1e3)&&(this.elem.style.left=(Number(this.elem.textContent)-this._min)*this.scale.offsetWidth/(this._max-this._min)+this.scale.offsetLeft-this.elem.offsetWidth/2+"px")}destroy(){this.scale.remove()}}class l{constructor(e){this._parentId=e}showSlider(){const e=new s(this._parentId);this.sliderLineId=e.init();new r(`#${this._parentId} > #${this.sliderLineId}`).init();new o(`#${this._parentId} > #${this.sliderLineId}`).init()}showScale(e,t,i){this._minValue=e,this._maxValue=t,this._stepValue=i;new a(this._parentId,this._minValue,this._maxValue,this._stepValue).init()}}const c=new l("range-slider");c.showSlider();const d=new class{constructor(e){this.observers=[],e||(e={}),this._min=e.min?e.min:0,this._max=e.max?e.max:300,this._step=e.step?e.step:50,this._kind=e.kind?e.kind:"horizontal",this._isBasic=!e.isBasic||e.isBasic}attach(e){if(this.observers.includes(e))return console.log("Model: Presenter has been attached already.");console.log("Model: Attached a presenter."),this.observers.push(e)}detach(e){const t=this.observers.indexOf(e);if(-1===t)return console.log("Subject: Nonexistent observer.");this.observers.splice(t,1),console.log("Subject: Detached an observer.")}notify(){console.log("Model: Notifying observers...");for(const e of this.observers)e.update(this)}calcUnit(){return{min:this._min,max:this._max,step:this._step}}}({min:40,step:60,max:260}),u=new class{transferModelData(e,t){this.modelOptions=e.calcUnit(),console.log(this.modelOptions),t.showScale(this.modelOptions.min,this.modelOptions.max,this.modelOptions.step)}update(e){console.log("ModelObserver: Reacted to the event.")}};d.attach(u),u.transferModelData(d,c),n();new l("slider2").showSlider()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,